
grid3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000210  00000000  00000000  0000018d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000111  00000000  00000000  0000039d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000214  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000009d  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000228  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000009a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	62 c0       	rjmp	.+196    	; 0xfa <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  38:	ff 92       	push	r15
  3a:	0f 93       	push	r16
  3c:	1f 93       	push	r17
DDRB = 0b00011110; // set DDRB
  3e:	8e e1       	ldi	r24, 0x1E	; 30
  40:	87 bb       	out	0x17, r24	; 23
DDRC = 0b1110110; // set DDRC 
  42:	86 e7       	ldi	r24, 0x76	; 118
  44:	84 bb       	out	0x14, r24	; 20
  46:	60 e0       	ldi	r22, 0x00	; 0
  48:	70 e0       	ldi	r23, 0x00	; 0
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	50 e0       	ldi	r21, 0x00	; 0
ls = (PINC & 0b0000001); // declaration of left sensor
rs = (PINC & 0b0001000); // declaration of right sensor
if ((ls==0b0000001)&&(rs==0b0001000))
{

PORTB = 0b00010010; // forward condition
  4e:	82 e1       	ldi	r24, 0x12	; 18
  50:	f8 2e       	mov	r15, r24
_delay_ms(1000000); // delay
count=count+1; // increment count
}
if ((ls==0b0000000)&&(rs==0b0000000)&&(count==3)) // for second node, count = 1
{
PORTB = 0b00000010; // right turn
  52:	02 e0       	ldi	r16, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  54:	a9 e1       	ldi	r26, 0x19	; 25
  56:	b0 e0       	ldi	r27, 0x00	; 0
_delay_ms(1000000); // delay
count=count+1; // increment count
}
if ((ls==0b0000000)&&(rs==0b0000000)&&(count==2)) // for second node, count = 1
{
PORTB = 0b00010000; // straight turn
  58:	10 e1       	ldi	r17, 0x10	; 16
  5a:	01 c0       	rjmp	.+2      	; 0x5e <__SREG__+0x1f>
#include<avr/io.h>
#include<util/delay.h>
void main()
{
DDRB = 0b00011110; // set DDRB
DDRC = 0b1110110; // set DDRC 
  5c:	ab 01       	movw	r20, r22
int ls,rs,count=0; // initializing count;ls=left sensor; rs= right sensor
while(1)
{
for(count=0;count<=3;count++)
{
ls = (PINC & 0b0000001); // declaration of left sensor
  5e:	93 b3       	in	r25, 0x13	; 19
rs = (PINC & 0b0001000); // declaration of right sensor
  60:	83 b3       	in	r24, 0x13	; 19
  62:	28 2f       	mov	r18, r24
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	28 70       	andi	r18, 0x08	; 8
  68:	30 70       	andi	r19, 0x00	; 0
if ((ls==0b0000001)&&(rs==0b0001000))
  6a:	90 ff       	sbrs	r25, 0
  6c:	05 c0       	rjmp	.+10     	; 0x78 <__SREG__+0x39>
  6e:	28 30       	cpi	r18, 0x08	; 8
  70:	31 05       	cpc	r19, r1
  72:	51 f5       	brne	.+84     	; 0xc8 <__SREG__+0x89>
{

PORTB = 0b00010010; // forward condition
  74:	f8 ba       	out	0x18, r15	; 24
  76:	28 c0       	rjmp	.+80     	; 0xc8 <__SREG__+0x89>

}
if ((ls==0b0000000)&&(rs==0b0000000)&&(count==0)) // for first node, count = 0
  78:	23 2b       	or	r18, r19
  7a:	31 f5       	brne	.+76     	; 0xc8 <__SREG__+0x89>
  7c:	67 2b       	or	r22, r23
  7e:	09 f0       	breq	.+2      	; 0x82 <__SREG__+0x43>
  80:	38 c0       	rjmp	.+112    	; 0xf2 <__SREG__+0xb3>
{
PORTB = 0b00010000; // left turn
  82:	18 bb       	out	0x18, r17	; 24
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	9f ef       	ldi	r25, 0xFF	; 255
  88:	fd 01       	movw	r30, r26
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <__SREG__+0x4b>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  90:	d9 f7       	brne	.-10     	; 0x88 <__SREG__+0x49>
  92:	2d c0       	rjmp	.+90     	; 0xee <__SREG__+0xaf>
}


if ((ls==0b0000000)&&(rs==0b0000000)&&(count==1)) // for second node, count = 1
{
PORTB = 0b00000010; // right turn
  94:	08 bb       	out	0x18, r16	; 24
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	9f ef       	ldi	r25, 0xFF	; 255
  9a:	fd 01       	movw	r30, r26
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <__SREG__+0x5d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a2:	d9 f7       	brne	.-10     	; 0x9a <__SREG__+0x5b>
_delay_ms(1000000); // delay
count=count+1; // increment count
}
if ((ls==0b0000000)&&(rs==0b0000000)&&(count==2)) // for second node, count = 1
{
PORTB = 0b00010000; // straight turn
  a4:	18 bb       	out	0x18, r17	; 24
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	9f ef       	ldi	r25, 0xFF	; 255
  aa:	fd 01       	movw	r30, r26
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <__SREG__+0x6d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b2:	d9 f7       	brne	.-10     	; 0xaa <__SREG__+0x6b>
_delay_ms(1000000); // delay
count=count+1; // increment count
}
if ((ls==0b0000000)&&(rs==0b0000000)&&(count==3)) // for second node, count = 1
{
PORTB = 0b00000010; // right turn
  b4:	08 bb       	out	0x18, r16	; 24
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	fd 01       	movw	r30, r26
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <__SREG__+0x7d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <__SREG__+0x7b>
  c4:	44 e0       	ldi	r20, 0x04	; 4
  c6:	50 e0       	ldi	r21, 0x00	; 0
DDRB = 0b00011110; // set DDRB
DDRC = 0b1110110; // set DDRC 
int ls,rs,count=0; // initializing count;ls=left sensor; rs= right sensor
while(1)
{
for(count=0;count<=3;count++)
  c8:	ba 01       	movw	r22, r20
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	64 30       	cpi	r22, 0x04	; 4
  d0:	71 05       	cpc	r23, r1
  d2:	0c f4       	brge	.+2      	; 0xd6 <__SREG__+0x97>
  d4:	c3 cf       	rjmp	.-122    	; 0x5c <__SREG__+0x1d>
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	bf cf       	rjmp	.-130    	; 0x5e <__SREG__+0x1f>
{
PORTB = 0b00000010; // right turn
_delay_ms(1000000); // delay
count=count+1; // increment count
}
if ((ls==0b0000000)&&(rs==0b0000000)&&(count==2)) // for second node, count = 1
  e0:	42 30       	cpi	r20, 0x02	; 2
  e2:	51 05       	cpc	r21, r1
  e4:	f9 f2       	breq	.-66     	; 0xa4 <__SREG__+0x65>
{
PORTB = 0b00010000; // straight turn
_delay_ms(1000000); // delay
count=count+1; // increment count
}
if ((ls==0b0000000)&&(rs==0b0000000)&&(count==3)) // for second node, count = 1
  e6:	43 30       	cpi	r20, 0x03	; 3
  e8:	51 05       	cpc	r21, r1
  ea:	71 f7       	brne	.-36     	; 0xc8 <__SREG__+0x89>
  ec:	e3 cf       	rjmp	.-58     	; 0xb4 <__SREG__+0x75>
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	50 e0       	ldi	r21, 0x00	; 0
_delay_ms(1000000); //delay
count=count+1; // increment count
}


if ((ls==0b0000000)&&(rs==0b0000000)&&(count==1)) // for second node, count = 1
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	51 05       	cpc	r21, r1
  f6:	a1 f7       	brne	.-24     	; 0xe0 <__SREG__+0xa1>
  f8:	cd cf       	rjmp	.-102    	; 0x94 <__SREG__+0x55>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
