
grid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000058  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000109  00000000  00000000  000000e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b6  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000093  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000090  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	0f c0       	rjmp	.+30     	; 0x54 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
typedef struct AppStateStruct {
    int node;
}AppState;
void main()
{
DDRB = 0b00011110;
  38:	8e e1       	ldi	r24, 0x1E	; 30
  3a:	87 bb       	out	0x17, r24	; 23
DDRC = 0b1110110;
  3c:	86 e7       	ldi	r24, 0x76	; 118
  3e:	84 bb       	out	0x14, r24	; 20
ls = (PINC & 0b0000001);
rs = (PINC & 0b0001000);
count = (PINC & 0b0001001);
if ((ls == 0b0000001)&&(rs==0b0001000))
{
PORTB = 0b00010010;
  40:	22 e1       	ldi	r18, 0x12	; 18
DDRB = 0b00011110;
DDRC = 0b1110110;
int ls,rs,count;
while(1)
{
ls = (PINC & 0b0000001);
  42:	83 b3       	in	r24, 0x13	; 19
rs = (PINC & 0b0001000);
  44:	93 b3       	in	r25, 0x13	; 19
count = (PINC & 0b0001001);
  46:	33 b3       	in	r19, 0x13	; 19
if ((ls == 0b0000001)&&(rs==0b0001000))
  48:	80 ff       	sbrs	r24, 0
  4a:	fb cf       	rjmp	.-10     	; 0x42 <__SREG__+0x3>
  4c:	93 ff       	sbrs	r25, 3
  4e:	f9 cf       	rjmp	.-14     	; 0x42 <__SREG__+0x3>
{
PORTB = 0b00010010;
  50:	28 bb       	out	0x18, r18	; 24
  52:	f7 cf       	rjmp	.-18     	; 0x42 <__SREG__+0x3>

00000054 <_exit>:
  54:	f8 94       	cli

00000056 <__stop_program>:
  56:	ff cf       	rjmp	.-2      	; 0x56 <__stop_program>
